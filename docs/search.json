[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quarto with Python",
    "section": "",
    "text": "Folowing the spirit of “learning out loud”, I created several artifacts while I was learning about Quarto.\nI created one main content file (source) that imports each slide, to create:\nI also reused some of the content above in another Quarto file (source) to create:"
  },
  {
    "objectID": "index.html#the-content-value-chain",
    "href": "index.html#the-content-value-chain",
    "title": "Quarto with Python",
    "section": "The content value chain",
    "text": "The content value chain\n\n\nContent stuck in my computer is nearly worthless.\n\nGoal\n\nMove good content out of my computer as fast as possible\nReproducible\nGit-based collaboration\nWrite once, generate:\n\nCode\nPaper\nPowerPoint\nSite/documentation\n\n\n\n\n\n\n\nThe content value chain by (@drrob) captured by Amelia McNamara"
  },
  {
    "objectID": "index.html#literate-programming",
    "href": "index.html#literate-programming",
    "title": "Quarto with Python",
    "section": "Literate Programming",
    "text": "Literate Programming\n\n\nLiterate programming can help create high-quality reproducible, documented code.\nDonald E. Knuth proposed literate programming in a 1984 article.\nJupyter implements the literate programming paradigm, but generating high-quality mass-consumable output (articles, websites) requires additional tools.\n\n\n\n\nDonald Knuth’s Literate Programming"
  },
  {
    "objectID": "index.html#i-tried-many-tools-for-literate-programming",
    "href": "index.html#i-tried-many-tools-for-literate-programming",
    "title": "Quarto with Python",
    "section": "I tried many tools for Literate Programming",
    "text": "I tried many tools for Literate Programming\n\n\n\nLaTeX\n\nGreat for PDFs… Beamer for slides\nNot great for websites\nDynamic content: coding Latex\n\n\\usepackage{ifthen}\n@for, @while\n\n\n\n\nWord/PPT\n\nHard to collaborate before O365\nHard to reproduce / auto-generate\n\n\n\n\nJekyll / Github Pages\n\nGreat for sites\nNot great for slides, papers\n\n\n\nPython notebooks\n\nGreat, with Pandoc\n\n\n\nRMarkdown\n\nGreat for everything\nHeavily dependent on R\nNew features in Quarto"
  },
  {
    "objectID": "index.html#quarto",
    "href": "index.html#quarto",
    "title": "Quarto with Python",
    "section": "Quarto",
    "text": "Quarto\n\n\nQuarto® is an open-source scientific and technical publishing system built on Pandoc.\nThe name “quarto” comes from the format of a book or pamphlet printed with eight pages of text, four to a side, then folded twice to produce four leaves.\nThe earliest known European printed book, the Sibyllenbuch (Gutemberg, c.1452), was done in the quarto format. Shakespeare’s plays, too!\n\nWith Quarto, you can:\n\nWrite Markdown and Python (or R, Julia, OJS)\nUse equations, diagrams, citations, figures, etc.\nOutput articles, presentations, interactive websites…\nWork with Jupyter Lab or VSCode\n\nYou can install Quarto on Linux, Windows and Mac."
  },
  {
    "objectID": "index.html#the-content-pipeline-for-.ipynb",
    "href": "index.html#the-content-pipeline-for-.ipynb",
    "title": "Quarto with Python",
    "section": "The content pipeline for .ipynb",
    "text": "The content pipeline for .ipynb\n\n\nAbout 75% of data scientists use Python through Jupyter notebooks.\nWith some scripting, you can use Pandoc on .ipynb files to generate papers, HTML, PowerPoint, etc.\nYou just need to learn Pandoc and shell scripting.\n\n\n\n\n\ngraph TD\n    A[.ipynb] --> B((\"Pandoc\"))\n    B ----> E[.doc]\n    B ----> H[.pptx]\n    B --> C[.md]\n    B --> D[.tex] \n    D --> F((Xetex))\n    C --> I((Hugo))\n    F --> G[.pdf]\n    I --> J[.html]\n    style B fill:#FF6655AA\n    style F fill:#88ffFF\n    style I fill:#88ffFF"
  },
  {
    "objectID": "index.html#quarto-in-python-in-a-nutshell",
    "href": "index.html#quarto-in-python-in-a-nutshell",
    "title": "Quarto with Python",
    "section": "Quarto in Python, in a nutshell",
    "text": "Quarto in Python, in a nutshell\n\n\nAll you need to use Quarto is to add some YAML (mostly simplified Pandoc configurations) to a .qmd file.\nipynb + YAML = .qmd.\nThis keeps the configuration and content in the same file. You can then render the outputs using quarto render <file.qmd> in the command line.\n\n\n\n\n\ngraph TD\nQ[.qmd] --> A\nsubgraph Quarto\n    A[.ipynb] --> B((\"Pandoc\"))\n    B --> C[.md]\n    B --> D[.tex] \n    D --> F((Xetex))\n    C --> I((Hugo))\n    style B fill:#FF6655AA\n    style F fill:#88ffFF\n    style I fill:#88ffFF\nend\n    B ----> E[.doc]\n    B ----> H[.pptx]\n    F --> G[.pdf]\n    I --> J[.html]"
  },
  {
    "objectID": "index.html#the-yaml-front-matter",
    "href": "index.html#the-yaml-front-matter",
    "title": "Quarto with Python",
    "section": "The YAML front-matter",
    "text": "The YAML front-matter\n\n\nQuarto files always start with a YAML front-matter.\nThe YAML configuration determines what’s the output format of your document. A few popular output options are html, pptx, docx, and pdf.\nYou can use a single source file to generate multiple output types.\nFor example, the YAML on the right will generate a PowerPoint file and a Revealjs presentation.\n\n---\ntitle: \"Quarto with Python\"\nformat: \n  pptx:\n    reference-doc: templates/template.pptx\n  revealjs:\n    incremental: false\n    theme: pulse\n\nauthor: Lucas A. Meyer\ndate: 2022-07-07\n---"
  },
  {
    "objectID": "index.html#main-content",
    "href": "index.html#main-content",
    "title": "Quarto with Python",
    "section": "Main content",
    "text": "Main content\n\n\n\nWriting content\nWrite content in Markdown.\nQuarto’s Markdown supports figures, tables, bibliography, etc.\nIt also supports lots of extra features, like diagrams with mermaid and GraphViz, and even LaTeX equations:\n\\[\nE = mc^2\n\\]\n\n\n### Writing content\n\nWrite content in [Markdown].\n\nQuarto's Markdown supports\nfigures, tables, bibliography, etc.       \n\nIt also supports lots of extra features, \nlike diagrams with `mermaid` and \n`GraphViz`, and even LaTeX equations: \n\n$$\nE = mc^2\n$$"
  },
  {
    "objectID": "index.html#what-if-i-want-to-add-code",
    "href": "index.html#what-if-i-want-to-add-code",
    "title": "Quarto with Python",
    "section": "What if I want to add code?",
    "text": "What if I want to add code?\n\n\nThe best thing about Quarto is that you can use it to run any code that you would be able to run in a Python notebook.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw=\\\n                {'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()"
  },
  {
    "objectID": "index.html#diagrams",
    "href": "index.html#diagrams",
    "title": "Quarto with Python",
    "section": "Diagrams",
    "text": "Diagrams\n\n\nYou can use mermaid to create diagrams.\nThe diagram in this and in previous sections were created with mermaid.\nflowchart TD\n\nA[Hard] -->|Text| B(Round)\nB --> C{Decision}\nC -->|One| D[Result 1]\nC -->|Two| E[Result 2]\n\n\n\n\n\nflowchart TD\n\nA[Hard] -->|Text| B(Round)\nB --> C{Decision}\nC -->|One| D[Result 1]\nC -->|Two| E[Result 2]"
  },
  {
    "objectID": "index.html#regression-and-results",
    "href": "index.html#regression-and-results",
    "title": "Quarto with Python",
    "section": "Regression and results",
    "text": "Regression and results\n\n\nThis code runs the first simple regression in Wooldridge’s Econometrics\n\\(\\text{wage} = \\alpha + \\beta_1 \\text{educ} + \\epsilon\\)\n\n\n\ncoef\ns.e.\nt\np-value\n\n\n\n\n-0.9049\n0.685\n-1.321\n0.187\n\n\n0.5414\n0.053\n10.167\n0\n\n\n\n\n# Load the data\ndf_wage = pd.read_csv(\"data/wage1.csv\")\n\n# Create an OLS model using \n# the R syntax - assumes an intercept\nmod = smf.ols(formula=\"wage ~ educ\",\n              data=df_wage)\n\n# Fit the model\nres = mod.fit()\n\n# Show the results\nreg_table = pd.read_html(res.summary().\n  tables[1].as_html(), header=0)[0]\ndisplay(Markdown(reg_table.\n  to_markdown(index=False)))"
  },
  {
    "objectID": "index.html#basic-slide-syntax",
    "href": "index.html#basic-slide-syntax",
    "title": "Quarto with Python",
    "section": "Basic slide syntax",
    "text": "Basic slide syntax\n\n\nTo create slides, you create sections with #, titles with ##, and bullets with -.\n\nContent types\n\nYou can add several types of content\n\ncode (use backticks)\nimages\ndiagrams\ntables\netc.\n\n\n\n\n## Basic slide syntax\n\nTo create slides, you create sections \nwith `#`, titles with `##`, and bullets \nwith `-`.\n\n### Content types\n\n- You can add several types of content\n    - code (use backticks)\n    - images\n    - diagrams\n    - tables\n    - etc."
  },
  {
    "objectID": "index.html#creating-powerpoint-slides",
    "href": "index.html#creating-powerpoint-slides",
    "title": "Quarto with Python",
    "section": "Creating PowerPoint slides",
    "text": "Creating PowerPoint slides\n\n\nTo generate a presentation from a .qmd file, add format: pptx to the YAML front-matter.\nQuarto will use the pandoc PowerPoint rules to render the content from the .qmd into .pptx.\nThe “pandoc rules” limit the flexibility to create PowerPoint presentations. Quarto has better presentation support for revealjs and beamer.\n\n\nPowerPoint can use a template with only these layouts:\n\nTitle Slide\nTitle and Content\nSection Header\nTwo Content\nComparison\nContent with Caption\nBlank"
  },
  {
    "objectID": "index.html#powerpoint-layout-rules",
    "href": "index.html#powerpoint-layout-rules",
    "title": "Quarto with Python",
    "section": "PowerPoint layout rules",
    "text": "PowerPoint layout rules\nThe rules are available at:  https://pandoc.org/MANUAL.html#powerpoint-layout-choice\n\nTitle Slide: created from metadata fields like title and author\nSection Header: created from the top-level headings (#)\nTwo Content: used when .qmd source contains :::: {.columns} and only text content. Previous slide is an example.\nComparison: same as “Two Content”, but content of columns is not text\nContent with Caption: used when slide has non-text content, but no columns\nTitle and Content: whatever doesn’t fit the rules above."
  },
  {
    "objectID": "index.html#powerpoint-templates",
    "href": "index.html#powerpoint-templates",
    "title": "Quarto with Python",
    "section": "PowerPoint templates",
    "text": "PowerPoint templates\nBy adding a reference-doc entry to your YAML, you can tell Quarto (and pandoc) to use a file as a template for the format of your presentation.\nThe “Slide Master” needs to contain layouts named as per the previous slide (e.g. “Comparison”).\nThis allows you a lot of flexibility in the design of your slide deck, even if it is for just the small number of layouts that were listed in the previous slide.\nYou can control fonts, add background images, page numbering, etc.\n---\ntitle: \"Using Quarto for everything\"\nformat: pptx\nreference-doc: templates/template.pptx\nauthor: Lucas A. Meyer\ndate: 2022-07-14\n---"
  },
  {
    "objectID": "index.html#best-feature-generate-content-dynamically",
    "href": "index.html#best-feature-generate-content-dynamically",
    "title": "Quarto with Python",
    "section": "Best feature: generate content dynamically",
    "text": "Best feature: generate content dynamically\nLet’s say you’re presenting a project about population dynamics but you don’t know which world leaders are coming to the conference.\nOn the presentation day, you learn that Belgium, China, Brazil, India, Japan and Nigeria are attending.\nYou can use Python or R to automatically generate slides."
  },
  {
    "objectID": "index.html#generating-slides-with-python",
    "href": "index.html#generating-slides-with-python",
    "title": "Quarto with Python",
    "section": "Generating slides with Python",
    "text": "Generating slides with Python\nThe next slides/sections were generated using the code below:\n\ndf_dr = pd.read_csv(\"data/dr.csv.gz\", compression=\"gzip\")\ndf_pop = pd.read_csv(\"data/pop_brackets.csv.gz\", compression=\"gzip\")\nyears = [2000, 2025, 2050, 2075, 2100]\nregions = [\"Belgium\", \"China\", \"Brazil\", \"India\", \"Japan\", \"Nigeria\"]\n\nfor name in regions:\n    display(Markdown(f\"## Age and Population Pyramids for {name}\"))\n    display(Markdown(f'<div class=\"columns\">'))\n    display(Markdown(f'<div class=\"column\">'))\n    plot_dependency_ratio(df_dr[df_dr.Location == name])\n    display(Markdown(f'</div>'))\n    display(Markdown(f'<div class=\"column\">'))\n    plot_population_pyramid_series(df_pop[df_pop[\"Location\"]==name], years)\n    display(Markdown(f'</div>'))\n    display(Markdown(f'</div>'))"
  },
  {
    "objectID": "index.html#age-and-population-pyramids-for-belgium",
    "href": "index.html#age-and-population-pyramids-for-belgium",
    "title": "Quarto with Python",
    "section": "Age and Population Pyramids for Belgium",
    "text": "Age and Population Pyramids for Belgium"
  },
  {
    "objectID": "index.html#age-and-population-pyramids-for-china",
    "href": "index.html#age-and-population-pyramids-for-china",
    "title": "Quarto with Python",
    "section": "Age and Population Pyramids for China",
    "text": "Age and Population Pyramids for China"
  },
  {
    "objectID": "index.html#age-and-population-pyramids-for-brazil",
    "href": "index.html#age-and-population-pyramids-for-brazil",
    "title": "Quarto with Python",
    "section": "Age and Population Pyramids for Brazil",
    "text": "Age and Population Pyramids for Brazil"
  },
  {
    "objectID": "index.html#age-and-population-pyramids-for-india",
    "href": "index.html#age-and-population-pyramids-for-india",
    "title": "Quarto with Python",
    "section": "Age and Population Pyramids for India",
    "text": "Age and Population Pyramids for India"
  },
  {
    "objectID": "index.html#age-and-population-pyramids-for-japan",
    "href": "index.html#age-and-population-pyramids-for-japan",
    "title": "Quarto with Python",
    "section": "Age and Population Pyramids for Japan",
    "text": "Age and Population Pyramids for Japan"
  },
  {
    "objectID": "index.html#age-and-population-pyramids-for-nigeria",
    "href": "index.html#age-and-population-pyramids-for-nigeria",
    "title": "Quarto with Python",
    "section": "Age and Population Pyramids for Nigeria",
    "text": "Age and Population Pyramids for Nigeria"
  },
  {
    "objectID": "index.html#changing-one-line-creates-a-website",
    "href": "index.html#changing-one-line-creates-a-website",
    "title": "Quarto with Python",
    "section": "Changing one line creates a website",
    "text": "Changing one line creates a website\n---\ntitle: \"Quarto with Python\"\nformat: html\n    # revealjs:\n    #     incremental: false\n    #     theme: [simple, revealjs-customizations.scss]\n    #     title-slide-attributes:\n    #         data-background-image: images/data-viz-bg.jpg\n    #         data-background-size: contain\n    #         data-background-position: right\n\nauthor: Lucas A. Meyer\ndate: 2022-07-14\n---\n\nAdding or changing the format to html will create a website."
  },
  {
    "objectID": "index.html#screenshot-of-website",
    "href": "index.html#screenshot-of-website",
    "title": "Quarto with Python",
    "section": "Screenshot of website",
    "text": "Screenshot of website"
  },
  {
    "objectID": "index.html#writing-scholarly-articles",
    "href": "index.html#writing-scholarly-articles",
    "title": "Quarto with Python",
    "section": "Writing scholarly articles",
    "text": "Writing scholarly articles\nI reused some of the content of this presentation to create two scholarly-looking articles. The purpose of the articles is just to show how easy it is to generate them with Quarto, they don’t contain original research. Quarto add cross-reference, citations and bibliography support to Markdown.\nThe relevant files are:\n\nQuarto source file\nMicrosoft Word output\nLaTeX PDF output"
  },
  {
    "objectID": "index.html#scholarly-article-screenshots",
    "href": "index.html#scholarly-article-screenshots",
    "title": "Quarto with Python",
    "section": "Scholarly article screenshots",
    "text": "Scholarly article screenshots\n\n\n\n\n\nPDF version of the article\n\n\n\n\n\n\nMicrosoft Word version of the article"
  },
  {
    "objectID": "index.html#citations-and-footnotes",
    "href": "index.html#citations-and-footnotes",
    "title": "Quarto with Python",
    "section": "Citations and Footnotes",
    "text": "Citations and Footnotes\nCitations don’t work on presentations, but are easy to add to articles.\nYou need to reference a BibTex file in the YAML front-matter bibliography: references.bib. Quarto supports any of the 8000+ Citation Style Languages and will generate the “References” section automatically.\nYou can cite by using [@citation-name] in your text. Please check the article .qmd source and the PDF and DOCX outputs.\nGenerating footnotes is also easy. Using [^ref] links to a footnote, and [^ref: content of the footnote] generates its content1."
  },
  {
    "objectID": "index.html#cross-references",
    "href": "index.html#cross-references",
    "title": "Quarto with Python",
    "section": "Cross references",
    "text": "Cross references\n\n\nThe Quarto guide has a great section on cross-references. I cover only the main points.\nTo create a cross-referenceable figure, section or equation, you need to tag it with its corresponding prefix, respectively “fig”, “sec” and “eq”.\nTo tag it, use the following syntax: #prefix-name.\n\nFor example, when declaring a figure, you can use:\n![Elephant](elephant.png){#fig-elephant}\nLater, you can refer to it using:\nSee @fig-elephant for an illustration."
  },
  {
    "objectID": "index.html#books-in-quarto-1",
    "href": "index.html#books-in-quarto-1",
    "title": "Quarto with Python",
    "section": "Books in Quarto",
    "text": "Books in Quarto\nYou can also write books with quarto. From the same collection of .qmd files, Quarto can generate:\n\nePub\nPDF\nOnline book\n\nTwo recent examples are:\n\nHands-on Programming in R, by Garrett Grolemund (source)\nPython for Data Analysis, 3E, by Wes McKinney (source)"
  },
  {
    "objectID": "index.html#hands-on-programming-in-r",
    "href": "index.html#hands-on-programming-in-r",
    "title": "Quarto with Python",
    "section": "Hands-on Programming in R",
    "text": "Hands-on Programming in R\nThis is a free book, and you can see the Quarto (source) that generated it."
  },
  {
    "objectID": "index.html#python-for-data-analysis-3e",
    "href": "index.html#python-for-data-analysis-3e",
    "title": "Quarto with Python",
    "section": "Python for Data Analysis, 3E",
    "text": "Python for Data Analysis, 3E\nThis is another free book, and you can see the Quarto (source) that generated it."
  },
  {
    "objectID": "index.html#where-i-think-quarto-is-good-july-2022",
    "href": "index.html#where-i-think-quarto-is-good-july-2022",
    "title": "Quarto with Python",
    "section": "Where I think Quarto is good (July 2022)",
    "text": "Where I think Quarto is good (July 2022)\n\n\n\nArticles: maybe\nI think Quarto is more helpful for a team that already uses Git with Python notebooks or LaTeX to write articles.\nMicrosoft Word collaboration through SharePoint and Teams is easier than Git and Quarto… but it’s not reproducible.\n\n\nPython notebook: excellent\nQuarto adds features to Python notebooks without detracting anything. You just need a few YAML lines.\n\n\n\nBlog: excellent\nQuarto allowed me to have a scriptable, Python-based blog. I wrote code to post new articles to Twitter and LinkedIn.\n\n\nPresentations: maybe\nGreat for RevealJS. For PPT, render process => long edit cycle. Useful for:\n\na lot of dynamic content\nReproducibility needs\nCollaborators used to Git/Beamer"
  },
  {
    "objectID": "index.html#next-steps",
    "href": "index.html#next-steps",
    "title": "Quarto with Python",
    "section": "Next Steps",
    "text": "Next Steps\n\nThe Quarto website has great tutorials:\n\nJupyter\nVSCode\n\nIf you have multiple input files (e.g., blog or book), you can create a project. This allows rendering multiple files that link to each other.\nProjects can have pre- and post-render steps in Python, R, Lua and shell script"
  },
  {
    "objectID": "index.html#hacks",
    "href": "index.html#hacks",
    "title": "Quarto with Python",
    "section": "Hacks",
    "text": "Hacks\nQuarto is under active development, and quickly reaching v1.0. While creating this content, I had to do some workarounds.\n\nI created a script to quickly install the latest version\nMermaid diagrams blank in PPTX. Bug quickly fixed.\nMermaid diagrams blank in RevealJS. Workaround: refresh.\nHTML website and RevealJS from same source: images disappear\n\nWorkaround: add self-contained: true to YAML front-matter\n\nPandoc large monospaced font size in PowerPoint. Workaround: script.\nThe decorations on this slide only appear on RevealJS, by design.\nSlide with article screenshots renders weird in HTML, no workaround."
  },
  {
    "objectID": "presentation.html#the-content-value-chain",
    "href": "presentation.html#the-content-value-chain",
    "title": "Using Quarto with Python",
    "section": "The content value chain",
    "text": "The content value chain\n\n\nContent stuck in my computer is nearly worthless.\nGoal\n\nMove good content out of my computer as fast as possible\nReproducible\nGit-based collaboration\nWrite once, generate:\n\nCode\nPaper\nPowerPoint\nSite/documentation\n\n\n\n\n\n\nThe content value chain by (@drrob) captured by Amelia McNamara"
  },
  {
    "objectID": "presentation.html#literate-programming",
    "href": "presentation.html#literate-programming",
    "title": "Using Quarto with Python",
    "section": "Literate Programming",
    "text": "Literate Programming\n\n\nLiterate programming can help create high-quality reproducible, documented code.\nDonald E. Knuth proposed literate programming in a 1984 article.\nJupyter implements the literate programming paradigm, but generating high-quality mass-consumable output (articles, websites) requires additional tools.\n\n\n\n\nDonald Knuth’s Literate Programming"
  },
  {
    "objectID": "presentation.html#i-tried-many-tools-for-literate-programming",
    "href": "presentation.html#i-tried-many-tools-for-literate-programming",
    "title": "Using Quarto with Python",
    "section": "I tried many tools for Literate Programming",
    "text": "I tried many tools for Literate Programming\n\n\nLaTeX\n\nGreat for PDFs… Beamer for slides\nNot great for websites\nDynamic content: coding Latex\n\n\\usepackage{ifthen}\n@for, @while\n\n\nWord/PPT\n\nHard to collaborate before O365\nHard to reproduce / auto-generate\n\n\nJekyll / Github Pages\n\nGreat for sites\nNot great for slides, papers\n\nPython notebooks\n\nGreat, with Pandoc\n\nRMarkdown\n\nGreat for everything\nHeavily dependent on R\nNew features in Quarto"
  },
  {
    "objectID": "presentation.html#quarto",
    "href": "presentation.html#quarto",
    "title": "Using Quarto with Python",
    "section": "Quarto",
    "text": "Quarto\n\n\nQuarto® is an open-source scientific and technical publishing system built on Pandoc.\nThe name “quarto” comes from the format of a book or pamphlet printed with eight pages of text, four to a side, then folded twice to produce four leaves.\nThe earliest known European printed book, the Sibyllenbuch (Gutemberg, c.1452), was done in the quarto format. Shakespeare’s plays, too!\n\nWith Quarto, you can:\n\nWrite Markdown and Python (or R, Julia, OJS)\nUse equations, diagrams, citations, figures, etc.\nOutput articles, presentations, interactive websites…\nWork with Jupyter Lab or VSCode\n\nYou can install Quarto on Linux, Windows and Mac."
  },
  {
    "objectID": "presentation.html#the-content-pipeline-for-.ipynb",
    "href": "presentation.html#the-content-pipeline-for-.ipynb",
    "title": "Using Quarto with Python",
    "section": "The content pipeline for .ipynb",
    "text": "The content pipeline for .ipynb\n\n\nAbout 75% of data scientists use Python through Jupyter notebooks.\nWith some scripting, you can use Pandoc on .ipynb files to generate papers, HTML, PowerPoint, etc.\nYou just need to learn Pandoc and shell scripting.\n\nRefresh the page to see the diagram on the right.\n\n\n\n\n\n\ngraph TD\n    A[.ipynb] --> B((\"Pandoc\"))\n    B ----> E[.doc]\n    B ----> H[.pptx]\n    B --> C[.md]\n    B --> D[.tex] \n    D --> F((Xetex))\n    C --> I((Hugo))\n    F --> G[.pdf]\n    I --> J[.html]\n    style B fill:#FF6655AA\n    style F fill:#88ffFF\n    style I fill:#88ffFF"
  },
  {
    "objectID": "presentation.html#quarto-in-python-in-a-nutshell",
    "href": "presentation.html#quarto-in-python-in-a-nutshell",
    "title": "Using Quarto with Python",
    "section": "Quarto in Python, in a nutshell",
    "text": "Quarto in Python, in a nutshell\n\n\nAll you need to use Quarto is to add some YAML (mostly simplified Pandoc configurations) to a .qmd file.\nipynb + YAML = .qmd.\nThis keeps the configuration and content in the same file. You can then render the outputs using quarto render <file.qmd> in the command line.\n\nRefresh the page to see the diagram on the right.\n\n\n\n\n\n\ngraph TD\nQ[.qmd] --> A\nsubgraph Quarto\n    A[.ipynb] --> B((\"Pandoc\"))\n    B --> C[.md]\n    B --> D[.tex] \n    D --> F((Xetex))\n    C --> I((Hugo))\n    style B fill:#FF6655AA\n    style F fill:#88ffFF\n    style I fill:#88ffFF\nend\n    B ----> E[.doc]\n    B ----> H[.pptx]\n    F --> G[.pdf]\n    I --> J[.html]"
  },
  {
    "objectID": "presentation.html#the-yaml-front-matter",
    "href": "presentation.html#the-yaml-front-matter",
    "title": "Using Quarto with Python",
    "section": "The YAML front-matter",
    "text": "The YAML front-matter\n\n\nQuarto files always start with a YAML front-matter.\nThe YAML configuration determines what’s the output format of your document. A few popular output options are html, pptx, docx, and pdf.\nYou can use a single source file to generate multiple output types.\nFor example, the YAML on the right will generate a PowerPoint file and a Revealjs presentation.\n\n---\ntitle: \"Quarto with Python\"\nformat: \n  pptx:\n    reference-doc: templates/template.pptx\n  revealjs:\n    incremental: false\n    theme: pulse\n\nauthor: Lucas A. Meyer\ndate: 2022-07-07\n---"
  },
  {
    "objectID": "presentation.html#main-content",
    "href": "presentation.html#main-content",
    "title": "Using Quarto with Python",
    "section": "Main content",
    "text": "Main content\n\n\nWriting content\nWrite content in Markdown.\nQuarto’s Markdown supports figures, tables, bibliography, etc.\nIt also supports lots of extra features, like diagrams with mermaid and GraphViz, and even LaTeX equations:\n\\[\nE = mc^2\n\\]\n\n### Writing content\n\nWrite content in [Markdown].\n\nQuarto's Markdown supports\nfigures, tables, bibliography, etc.       \n\nIt also supports lots of extra features, \nlike diagrams with `mermaid` and \n`GraphViz`, and even LaTeX equations: \n\n$$\nE = mc^2\n$$"
  },
  {
    "objectID": "presentation.html#what-if-i-want-to-add-code",
    "href": "presentation.html#what-if-i-want-to-add-code",
    "title": "Using Quarto with Python",
    "section": "What if I want to add code?",
    "text": "What if I want to add code?\n\n\nThe best thing about Quarto is that you can use it to run any code that you would be able to run in a Python notebook.\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw=\\\n                {'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()"
  },
  {
    "objectID": "presentation.html#diagrams",
    "href": "presentation.html#diagrams",
    "title": "Using Quarto with Python",
    "section": "Diagrams",
    "text": "Diagrams\n\n\nYou can use mermaid to create diagrams.\nThe diagram in this and in previous sections were created with mermaid.\nflowchart TD\n\nA[Hard] -->|Text| B(Round)\nB --> C{Decision}\nC -->|One| D[Result 1]\nC -->|Two| E[Result 2]\n\n\n\n\n\nflowchart TD\n\nA[Hard] -->|Text| B(Round)\nB --> C{Decision}\nC -->|One| D[Result 1]\nC -->|Two| E[Result 2]"
  },
  {
    "objectID": "presentation.html#regression-and-results",
    "href": "presentation.html#regression-and-results",
    "title": "Using Quarto with Python",
    "section": "Regression and results",
    "text": "Regression and results\n\n\nThis code runs the first simple regression in Wooldridge’s Econometrics\n\\(\\text{wage} = \\alpha + \\beta_1 \\text{educ} + \\epsilon\\)\n\n\n\ncoef\ns.e.\nt\np-value\n\n\n\n\n-0.9049\n0.685\n-1.321\n0.187\n\n\n0.5414\n0.053\n10.167\n0\n\n\n\n\n# Load the data\ndf_wage = pd.read_csv(\"data/wage1.csv\")\n\n# Create an OLS model using \n# the R syntax - assumes an intercept\nmod = smf.ols(formula=\"wage ~ educ\",\n              data=df_wage)\n\n# Fit the model\nres = mod.fit()\n\n# Show the results\nreg_table = pd.read_html(res.summary().\n  tables[1].as_html(), header=0)[0]\ndisplay(Markdown(reg_table.\n  to_markdown(index=False)))"
  },
  {
    "objectID": "presentation.html#basic-slide-syntax",
    "href": "presentation.html#basic-slide-syntax",
    "title": "Using Quarto with Python",
    "section": "Basic slide syntax",
    "text": "Basic slide syntax\n\n\nTo create slides, you create sections with #, titles with ##, and bullets with -.\nContent types\n\nYou can add several types of content\n\ncode (use backticks)\nimages\ndiagrams\ntables\netc.\n\n\n\n## Basic slide syntax\n\nTo create slides, you create sections \nwith `#`, titles with `##`, and bullets \nwith `-`.\n\n### Content types\n\n- You can add several types of content\n    - code (use backticks)\n    - images\n    - diagrams\n    - tables\n    - etc."
  },
  {
    "objectID": "presentation.html#creating-powerpoint-slides",
    "href": "presentation.html#creating-powerpoint-slides",
    "title": "Using Quarto with Python",
    "section": "Creating PowerPoint slides",
    "text": "Creating PowerPoint slides\n\n\nTo generate a presentation from a .qmd file, add format: pptx to the YAML front-matter.\nQuarto will use the pandoc PowerPoint rules to render the content from the .qmd into .pptx.\nThe “pandoc rules” limit the flexibility to create PowerPoint presentations. Quarto has better presentation support for revealjs and beamer.\n\n\nPowerPoint can use a template with only these layouts:\n\nTitle Slide\nTitle and Content\nSection Header\nTwo Content\nComparison\nContent with Caption\nBlank"
  },
  {
    "objectID": "presentation.html#powerpoint-layout-rules",
    "href": "presentation.html#powerpoint-layout-rules",
    "title": "Using Quarto with Python",
    "section": "PowerPoint layout rules",
    "text": "PowerPoint layout rules\nThe rules are available at:  https://pandoc.org/MANUAL.html#powerpoint-layout-choice\n\nTitle Slide: created from metadata fields like title and author\nSection Header: created from the top-level headings (#)\nTwo Content: used when .qmd source contains :::: {.columns} and only text content. Previous slide is an example.\nComparison: same as “Two Content”, but content of columns is not text\nContent with Caption: used when slide has non-text content, but no columns\nTitle and Content: whatever doesn’t fit the rules above."
  },
  {
    "objectID": "presentation.html#powerpoint-templates",
    "href": "presentation.html#powerpoint-templates",
    "title": "Using Quarto with Python",
    "section": "PowerPoint templates",
    "text": "PowerPoint templates\nBy adding a reference-doc entry to your YAML, you can tell Quarto (and pandoc) to use a file as a template for the format of your presentation.\nThe “Slide Master” needs to contain layouts named as per the previous slide (e.g. “Comparison”).\nThis allows you a lot of flexibility in the design of your slide deck, even if it is for just the small number of layouts that were listed in the previous slide.\nYou can control fonts, add background images, page numbering, etc.\n---\ntitle: \"Using Quarto for everything\"\nformat: pptx\nreference-doc: templates/template.pptx\nauthor: Lucas A. Meyer\ndate: 2022-07-14\n---"
  },
  {
    "objectID": "presentation.html#best-feature-generate-content-dynamically",
    "href": "presentation.html#best-feature-generate-content-dynamically",
    "title": "Using Quarto with Python",
    "section": "Best feature: generate content dynamically",
    "text": "Best feature: generate content dynamically\nLet’s say you’re presenting a project about population dynamics but you don’t know which world leaders are coming to the conference.\nOn the presentation day, you learn that Belgium, China, Brazil, India, Japan and Nigeria are attending.\nYou can use Python or R to automatically generate slides."
  },
  {
    "objectID": "presentation.html#generating-slides-with-python",
    "href": "presentation.html#generating-slides-with-python",
    "title": "Using Quarto with Python",
    "section": "Generating slides with Python",
    "text": "Generating slides with Python\nThe next slides/sections were generated using the code below:\n\ndf_dr = pd.read_csv(\"data/dr.csv.gz\", compression=\"gzip\")\ndf_pop = pd.read_csv(\"data/pop_brackets.csv.gz\", compression=\"gzip\")\nyears = [2000, 2025, 2050, 2075, 2100]\nregions = [\"Belgium\", \"China\", \"Brazil\", \"India\", \"Japan\", \"Nigeria\"]\n\nfor name in regions:\n    display(Markdown(f\"## Age and Population Pyramids for {name}\"))\n    display(Markdown(f'<div class=\"columns\">'))\n    display(Markdown(f'<div class=\"column\">'))\n    plot_dependency_ratio(df_dr[df_dr.Location == name])\n    display(Markdown(f'</div>'))\n    display(Markdown(f'<div class=\"column\">'))\n    plot_population_pyramid_series(df_pop[df_pop[\"Location\"]==name], years)\n    display(Markdown(f'</div>'))\n    display(Markdown(f'</div>'))"
  },
  {
    "objectID": "presentation.html#age-and-population-pyramids-for-belgium",
    "href": "presentation.html#age-and-population-pyramids-for-belgium",
    "title": "Using Quarto with Python",
    "section": "Age and Population Pyramids for Belgium",
    "text": "Age and Population Pyramids for Belgium"
  },
  {
    "objectID": "presentation.html#age-and-population-pyramids-for-china",
    "href": "presentation.html#age-and-population-pyramids-for-china",
    "title": "Using Quarto with Python",
    "section": "Age and Population Pyramids for China",
    "text": "Age and Population Pyramids for China"
  },
  {
    "objectID": "presentation.html#age-and-population-pyramids-for-brazil",
    "href": "presentation.html#age-and-population-pyramids-for-brazil",
    "title": "Using Quarto with Python",
    "section": "Age and Population Pyramids for Brazil",
    "text": "Age and Population Pyramids for Brazil"
  },
  {
    "objectID": "presentation.html#age-and-population-pyramids-for-india",
    "href": "presentation.html#age-and-population-pyramids-for-india",
    "title": "Using Quarto with Python",
    "section": "Age and Population Pyramids for India",
    "text": "Age and Population Pyramids for India"
  },
  {
    "objectID": "presentation.html#age-and-population-pyramids-for-japan",
    "href": "presentation.html#age-and-population-pyramids-for-japan",
    "title": "Using Quarto with Python",
    "section": "Age and Population Pyramids for Japan",
    "text": "Age and Population Pyramids for Japan"
  },
  {
    "objectID": "presentation.html#age-and-population-pyramids-for-nigeria",
    "href": "presentation.html#age-and-population-pyramids-for-nigeria",
    "title": "Using Quarto with Python",
    "section": "Age and Population Pyramids for Nigeria",
    "text": "Age and Population Pyramids for Nigeria"
  },
  {
    "objectID": "presentation.html#changing-one-line-creates-a-website",
    "href": "presentation.html#changing-one-line-creates-a-website",
    "title": "Using Quarto with Python",
    "section": "Changing one line creates a website",
    "text": "Changing one line creates a website\n---\ntitle: \"Quarto with Python\"\nformat: html\n    # revealjs:\n    #     incremental: false\n    #     theme: [simple, revealjs-customizations.scss]\n    #     title-slide-attributes:\n    #         data-background-image: images/data-viz-bg.jpg\n    #         data-background-size: contain\n    #         data-background-position: right\n\nauthor: Lucas A. Meyer\ndate: 2022-07-14\n---\n\nAdding or changing the format to html will create a website."
  },
  {
    "objectID": "presentation.html#screenshot-of-website",
    "href": "presentation.html#screenshot-of-website",
    "title": "Using Quarto with Python",
    "section": "Screenshot of website",
    "text": "Screenshot of website"
  },
  {
    "objectID": "presentation.html#writing-scholarly-articles",
    "href": "presentation.html#writing-scholarly-articles",
    "title": "Using Quarto with Python",
    "section": "Writing scholarly articles",
    "text": "Writing scholarly articles\nI reused some of the content of this presentation to create two scholarly-looking articles. The purpose of the articles is just to show how easy it is to generate them with Quarto, they don’t contain original research. Quarto add cross-reference, citations and bibliography support to Markdown.\nThe relevant files are:\n\nQuarto source file\nMicrosoft Word output\nLaTeX PDF output"
  },
  {
    "objectID": "presentation.html#scholarly-article-screenshots",
    "href": "presentation.html#scholarly-article-screenshots",
    "title": "Using Quarto with Python",
    "section": "Scholarly article screenshots",
    "text": "Scholarly article screenshots\n\n\n\n\n\nPDF version of the article\n\n\n\n\n\n\nMicrosoft Word version of the article"
  },
  {
    "objectID": "presentation.html#citations-and-footnotes",
    "href": "presentation.html#citations-and-footnotes",
    "title": "Using Quarto with Python",
    "section": "Citations and Footnotes",
    "text": "Citations and Footnotes\nCitations don’t work on presentations, but are easy to add to articles.\nYou need to reference a BibTex file in the YAML front-matter bibliography: references.bib. Quarto supports any of the 8000+ Citation Style Languages and will generate the “References” section automatically.\nYou can cite by using [@citation-name] in your text. Please check the article .qmd source and the PDF and DOCX outputs.\nGenerating footnotes is also easy. Using [^ref] links to a footnote, and [^ref: content of the footnote] generates its content1.\nYou can use footnotes in presentations and websites, too"
  },
  {
    "objectID": "presentation.html#cross-references",
    "href": "presentation.html#cross-references",
    "title": "Using Quarto with Python",
    "section": "Cross references",
    "text": "Cross references\n\n\nThe Quarto guide has a great section on cross-references. I cover only the main points.\nTo create a cross-referenceable figure, section or equation, you need to tag it with its corresponding prefix, respectively “fig”, “sec” and “eq”.\nTo tag it, use the following syntax: #prefix-name.\n\nFor example, when declaring a figure, you can use:\n![Elephant](elephant.png){#fig-elephant}\nLater, you can refer to it using:\nSee @fig-elephant for an illustration."
  },
  {
    "objectID": "presentation.html#books-in-quarto-1",
    "href": "presentation.html#books-in-quarto-1",
    "title": "Using Quarto with Python",
    "section": "Books in Quarto",
    "text": "Books in Quarto\nYou can also write books with quarto. From the same collection of .qmd files, Quarto can generate:\n\nePub\nPDF\nOnline book\n\nTwo recent examples are:\n\nHands-on Programming in R, by Garrett Grolemund (source)\nPython for Data Analysis, 3E, by Wes McKinney (source)"
  },
  {
    "objectID": "presentation.html#hands-on-programming-in-r",
    "href": "presentation.html#hands-on-programming-in-r",
    "title": "Using Quarto with Python",
    "section": "Hands-on Programming in R",
    "text": "Hands-on Programming in R\nThis is a free book, and you can see the Quarto (source) that generated it."
  },
  {
    "objectID": "presentation.html#python-for-data-analysis-3e",
    "href": "presentation.html#python-for-data-analysis-3e",
    "title": "Using Quarto with Python",
    "section": "Python for Data Analysis, 3E",
    "text": "Python for Data Analysis, 3E\nThis is another free book, and you can see the Quarto (source) that generated it."
  },
  {
    "objectID": "presentation.html#where-i-think-quarto-is-good-july-2022",
    "href": "presentation.html#where-i-think-quarto-is-good-july-2022",
    "title": "Using Quarto with Python",
    "section": "Where I think Quarto is good (July 2022)",
    "text": "Where I think Quarto is good (July 2022)\n\n\nArticles: maybe\nI think Quarto is more helpful for a team that already uses Git with Python notebooks or LaTeX to write articles.\nMicrosoft Word collaboration through SharePoint and Teams is easier than Git and Quarto… but it’s not reproducible.\nPython notebook: excellent\nQuarto adds features to Python notebooks without detracting anything. You just need a few YAML lines.\n\nBlog: excellent\nQuarto allowed me to have a scriptable, Python-based blog. I wrote code to post new articles to Twitter and LinkedIn.\nPresentations: maybe\nGreat for RevealJS. For PPT, render process => long edit cycle. Useful for:\n\na lot of dynamic content\nReproducibility needs\nCollaborators used to Git/Beamer"
  },
  {
    "objectID": "presentation.html#next-steps",
    "href": "presentation.html#next-steps",
    "title": "Using Quarto with Python",
    "section": "Next Steps",
    "text": "Next Steps\n\nThe Quarto website has great tutorials:\n\nJupyter\nVSCode\n\nIf you have multiple input files (e.g., blog or book), you can create a project. This allows rendering multiple files that link to each other.\nProjects can have pre- and post-render steps in Python, R, Lua and shell script"
  },
  {
    "objectID": "presentation.html#hacks",
    "href": "presentation.html#hacks",
    "title": "Using Quarto with Python",
    "section": "Hacks",
    "text": "Hacks\nQuarto is under active development, and quickly reaching v1.0. While creating this content, I had to do some workarounds.\n\nI created a script to quickly install the latest version\nMermaid diagrams blank in PPTX. Bug quickly fixed.\nMermaid diagrams blank in RevealJS. Workaround: refresh.\nHTML website and RevealJS from same source: images disappear\n\nWorkaround: add self-contained: true to YAML front-matter\n\nPandoc large monospaced font size in PowerPoint. Workaround: script.\nThe decorations on this slide only appear on RevealJS, by design.\nSlide with article screenshots renders weird in HTML, no workaround."
  }
]