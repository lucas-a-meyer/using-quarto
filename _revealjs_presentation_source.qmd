
```{python}
from IPython.display import display, Markdown
from itertools import chain
import pandas as pd
```

# Why Quarto

## Quarto helps with the content value chain

:::: {.columns}
::: {.column}
![The content value chain from David Robinson's (@drrob) Tweet](images/useful-output.jpg)
:::
::: {.column}
> - Move content out of my computer **as fast as possible**
> - Reproducible
> - Git-based collaboration
> - Write once, generate:
>   - Code
>   - Paper
>   - PowerPoint
>   - Site/documentation
:::
::::

<!-- FUTURE CONTENT 
## Also... the population project

:::: {.columns}
::: {.column}

### Goals and questions
Explore the consequences of the decline in population predicted to start
at around 2100 for the world, but earlier in developed nations. 

- What are the economic impacts?
- What should governments do?

:::
::: {.column}

### Population project challenges

- Unknown collaborators at the start
- Need to go "wide" rather than "deep"
- May need to pivot fast
- May need to generate data on demand
    - Show graphs for country X, Y and Z
- Generate code, paper, PowerPoint

:::
::::
:::::
-->

## In the last 20 years, I tried many tools...

:::: {.columns}
::: {.column}

### LaTeX

- Great for PDFs... Ok, Beamer!
- Website generation is not great
- I even know how to write code!
    - `\usepackage{ifthen}`
    - `@for`, `@while`

### Word/PPT

- Hard to collaborate before O365
- Hard to reproduce / auto-generate 

:::
::: {.column}

### Jekyll

- Great for sites
- Not great for PPT, papers

### RMarkdown

- Great PDFs
- Mostly good presentations
- Hugo and `blogdown` work well
- Need to learn `R` 

:::
::::

## The content pipeline for .ipynb

About [75% of data scientists](https://visualstudiomagazine.com/articles/2021/02/09/kaggle-survey.aspx) use Python through Jupyter notebooks, and one can use [`pandoc`](https://pandoc.org/index.html) to generate papers and PowerPoint, but it can be complicated.

```{mermaid}
graph LR
    A[.ipynb] --> B(("Pandoc"))
    B ----> E[.doc]
    B ----> H[.pptx]
    B --> C[.md]
    B --> D[.tex] 
    D --> F((Xetex))
    C --> I((Hugo))
    F --> G[.pdf]
    I --> J[.html]
    style B fill:#FF6655AA
    style F fill:#88ffFF
    style I fill:#88ffFF
```

## Quarto for Python, in a nutshell

In Quarto's `.qmd` files, you write Markdown and code, just like `.ipynb`. Add some `YAML` configuration and Quarto does the intermediate steps. It integrates well with VSCode and Jupyter.

```{mermaid}
graph LR
Q[.qmd] --> A
subgraph Quarto
    A[.ipynb] --> B(("Pandoc"))
    B --> C[.md]
    B --> D[.tex] 
    D --> F((Xetex))
    C --> I((Hugo))
    style B fill:#FF6655AA
    style F fill:#88ffFF
    style I fill:#88ffFF
end
    B ----> E[.doc]
    B ----> H[.pptx]
    F --> G[.pdf]
    I --> J[.html]
```

## But wait, there's more!

Quarto can easily run pre-scripts and post-scripts. I frequenly use this to pre-process data and to automatically publish output to git repositories.

```{mermaid}
graph LR
    P[Pre-scripts] --> Q
    style P fill:#AA99FF
    Q[.qmd] --> A
    subgraph Quarto
        A[.ipynb] --> B(("Pandoc"))
        B --> C[.md]
        B --> D[.tex] 
        D --> F((Xetex))
        C --> I((Hugo))
        style B fill:#FF6655AA
        style F fill:#88ffFF
        style I fill:#88ffFF
    end
        B ----> E[.doc]
        B ----> H[.pptx]
        F --> G[.pdf]
        I --> J[.html]
    E --> X[Post-scripts]
    H --> X
    G --> X
    J --> X
    style X fill:#AA99FF
```

# Using Quarto

## The basics

:::: {.columns}
::: {.column}
Whether you use Quarto from `.qmd`, `.ipynb`, or `.Rmd` files, you always start with a YAML front-matter file. 

The YAML configuration determines what's the output format of your document. A few popular output options are `html`, `pptx`, `docx`, and `pdf`. 

**You can use a single source file to generate multiple output types.**

For example, the YAML on the right will generate a PowerPoint file and a Revealjs presentation.
:::
::: {.column}
```yaml
---
title: "Using Quarto for everything"
format: 
    pptx:
        reference-doc: templates/template.pptx
    revealjs:
        incremental: false
        theme: sky

author: Lucas A. Meyer
date: 2022-07-14
---
```
:::
::::

## Main content

:::: {.columns}

::: {.column}
```markdown
### Writing the main content

Most writing in Quarto is done in [Markdown].

Quarto's Markdown supports everything I'm
used to: figures, tables, bibliography, etc.

It also supports lots of extra features, like
diagrams with `mermaid` and `GraphViz` and
even LaTeX equations: 

$$
E = mc^2
$$
```
:::

::: {.column}
### Writing the main content

Most writing in Quarto is done in [Markdown](https://quarto.org/docs/authoring/markdown-basics.html).

Quarto's Markdown supports everything I'm
used to: figures, tables, bibliography, etc.

It also supports lots of extra features, like
diagrams with `mermaid` and `GraphViz` and
even LaTeX equations: 

$$
E = mc^2
$$
::: 
::::

## What if I want to add code?

:::: {.columns}
::: {.column}

The best thing about Quarto is that you can use it to run 
any code that you would be able to run in a Python notebook.

```python

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(subplot_kw=\
                {'projection': 'polar'})
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()

```
:::
::: {.column}

```{python}
#| echo: false

import numpy as np
import matplotlib.pyplot as plt

r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(subplot_kw={'projection': 'polar'})
ax.plot(theta, r)
ax.set_rticks([0.5, 1, 1.5, 2])
ax.grid(True)
plt.show()
```

:::
::::

# Presentations in Quarto

<!-- 
## Creating slides

:::: {.columns}
::: {.column}
To generate a presentation from a `.qmd` file, add `format: pptx` to the YAML front-matter.

The part I liked the _least_ is that Quarto will use the 
[pandoc PowerPoint rules](https://pandoc.org/MANUAL.html#powerpoint-layout-choice) 
to render the content from the `.qmd` into the `.pptx`.

The "pandoc rules" substantially limit the flexibility you would have in PowerPoint presentations. 
Quarto has better presentation support for `revealjs` and `beamer`. 
:::

::: {.column}
- Quarto can use a template with (**only**) these layouts:
    - Title Slide
    - Title and Content
    - Section Header
    - Two Content
    - Comparison
    - Content with Caption
    - Blank

:::
::::

## PowerPoint layout rules

The rules are available at: <br />
<https://pandoc.org/MANUAL.html#powerpoint-layout-choice>

- **Title Slide:** created from metadata fields like `title` and `author`
- **Section Header:** created from the top-level markdown headings (for example, `#`)
- **Two Content:** used when `.md` source contains `.columns` div (`:::: {.columns}`) and text content
- **Comparison:** same as "Two Content", but content of divs is not text
- **Blank:** used for slides that have no displayable content (e.g. notes)
- **Content with Caption:** used when content doesn't have a `columns` div but has text **and** non-text content
- **Title and Content:** whatever doesn't fit the rules above.

## A redeeming PowerPoint feature: templates

By adding a `reference-doc` entry to your YAML, you can tell
Quarto (and pandoc) to use a file as a template for the format
of your presentation. 

The "Slide Master" needs to contain layouts named as per the previous slide (e.g. "Comparison").

This allows you a lot of flexibility in the design of your
slide deck, even if it is for just the small number of layouts
that were listed in the previous slide.

You can control fonts, add background images, page numbering, etc.

```yaml
---
title: "Using Quarto for everything"
format: pptx
reference-doc: templates/template.pptx
author: Lucas A. Meyer
date: 2022-07-14
---
```
-->

## Basic slide syntax

:::: {.columns}

::: {.column}

```markdown
To create slides, you create sections 
with `#`, titles with `##`, and bullets 
with `-`.

Quarto will render your content in slide form.

### Content types

- You can add several types of content
    - code (use backticks)
    - images
    - diagrams
    - tables
    - etc.
```
:::
::: {.column}
To create slides, you create sections 
with `#`, titles with `##`, and bullets 
with `-`.

### Content types

- You can add several types of content
    - code (use backticks)
    - images
    - diagrams
    - tables
    - etc.
:::
::::

## Best feature: generate content dynamically

{{< include _graph_functions.qmd >}}

Let's say you're presenting a project about population dynamics but you 
don't know which world leaders are coming to the conference. 

On the presentation day, you learn that Belgium, China, Brazil, India, Japan and Nigeria are attending.

The next slides were generated using the code below:

```python
df_dr = pd.read_csv("data/dr.csv.gz", compression="gzip")
df_pop = pd.read_csv("data/pop_brackets.csv.gz", compression="gzip")

years = [2000, 2025, 2050, 2075, 2100]
regions = ["Belgium", "China", "Brazil", "India", "Japan", "Nigeria"]

for name in regions:
    display(Markdown(f"## Age and Population Pyramids for {name}"))
    display(Markdown(f'<div class="columns">'))
    display(Markdown(f'<div class="column">'))
    plot_dependency_ratio(df_dr[df_dr.Location == name])
    display(Markdown(f'</div>'))
    display(Markdown(f'<div class="column">'))
    plot_population_pyramid_series(df_pop[df_pop["Location"]==name], years)
    display(Markdown(f'</div>'))
    display(Markdown(f'</div>'))
```

#| output: asis

df_dr = pd.read_csv("data/dr.csv.gz", compression="gzip")
df_pop = pd.read_csv("data/pop_brackets.csv.gz", compression="gzip")

years = [2000, 2025, 2050, 2075, 2100]
regions = ["Belgium", "China", "Brazil", "India", "Japan", "Nigeria"]

for name in regions:
    display(Markdown(f"## Age and Population Pyramids for {name}"))
    display(Markdown(f'<div class="columns">'))
    display(Markdown(f'<div class="column">'))
    plot_dependency_ratio(df_dr[df_dr.Location == name])
    display(Markdown(f'</div>'))
    display(Markdown(f'<div class="column">'))
    plot_population_pyramid_series(df_pop[df_pop["Location"]==name], years)
    display(Markdown(f'</div>'))
    display(Markdown(f'</div>'))

```
