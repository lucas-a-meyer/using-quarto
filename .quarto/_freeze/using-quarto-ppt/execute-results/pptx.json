{
  "hash": "76137c82dd0097166756d0d3f1e83467",
  "result": {
    "markdown": "---\ntitle: \"Using Quarto for everything\"\nformat: pptx\nauthor: Lucas A. Meyer\ndate: 2022-07-14\nreference-doc: templates/template.pptx\n---\n\n# Why Quarto\n\n## Quarto helps with the content value chain\n\n:::: {.columns}\n::: {.column}\n![The content value chain from David Robinson's (@drrob) Tweet](images/useful-output.jpg)\n:::\n::: {.column}\n> - Move content out of my computer **as fast as possible**\n> - Reproducible\n> - Git-based collaboration\n> - Write once, generate:\n>   - Code\n>   - Paper\n>   - PowerPoint\n>   - Site/documentation\n:::\n::::\n\n## Also... the population project\n\n:::: {.columns}\n::: {.column}\n\n### Goals and questions\nExplore the consequences of the decline in population predicted to start\nat around 2100 for the world, but earlier in developed nations. \n\n- What are the economic impacts?\n- What should governments do?\n\n:::\n\n::: {.column}\n\n### Population project challenges\n\n- Unknown collaborators at the start\n- Need to go \"wide\" rather than \"deep\"\n- May need to pivot fast\n- May need to generate data on demand\n    - Show graphs for country X, Y and Z\n- Generate code, paper, PowerPoint\n\n:::\n::::\n\n## In the last 20 years, I tried many tools...\n\n:::: {.columns}\n::: {.column}\n\n### LaTeX\n\n- Great for PDFs... Ok, Beamer!\n- Website generation is not great\n- I even know how to write code!\n    - `\\usepackage{ifthen}`\n    - `@for`, `@while`\n\n### Word/PPT\n\n- Hard to collaborate before O365\n- Hard to reproduce / auto-generate \n\n:::\n::: {.column}\n\n### Jekyll\n\n- Great for sites\n- Not great for PPT, papers\n\n### RMarkdown\n\n- Great PDFs\n- Mostly good presentations\n- Hugo and `blogdown` work well\n- Need to learn `R` \n\n:::\n::::\n\n## The content pipeline for .ipynb\n\nAbout [75% of data scientists](https://visualstudiomagazine.com/articles/2021/02/09/kaggle-survey.aspx) use Python through Jupyter notebooks, and one can use [`pandoc`](https://pandoc.org/index.html) to generate papers and PowerPoint, but it can be complicated.\n\n![Processing ipynb](images/mermaid1.png)\n\n## Quarto for Python, in a nutshell\n\nIn Quarto's `.qmd` files, you write Markdown and code, just like `.ipynb`. Add some `YAML` configuration and Quarto does the intermediate steps. It integrates well with VSCode and Jupyter.\n\n![Quarto using Python](images/mermaid2-quarto-nutshell.png)\n\n## But wait, there's more!\n\nQuarto can easily run pre-scripts and post-scripts. I frequenly use this to pre-process data and to automatically publish output to git repositories.\n\n![Scripts](images/mermaid2-quarto-scripts.png)\n\n# Using Quarto\n\n## The basics\n\n:::: {.columns}\n::: {.column}\nWhether you use Quarto from `.qmd`, `.ipynb`, or `.Rmd` files, you always start with a YAML front-matter file. \n\nThe YAML configuration determines what's the output format of your document. A few popular output options are `html`, `pptx`, `docx`, and `pdf`. **You can use a single source file to generate multiple output types.**\n:::\n::: {.column}\n![YAML](images/yaml-front-matter.png)\n:::\n::::\n\n## What if I want to add code?\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw={'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](using-quarto-ppt_files/figure-pptx/cell-2-output-1.png){}\n:::\n:::\n\n\n# Presentations\n\n## Things that you can add to a template\n\n- Title Slide\n- Title and Content\n- Section Header\n- Two Content\n- Comparison\n- Content with Caption\n- Blank\n\n## Dependency ratios around the world\n\n\n\n## Population pyramids around the world\n\n\n\n<!-- # Websites -->\n\n## Projects\n\nYou can use Quarto to generate the whole shebang!\n\n\n# Appendix\n\n## Test multiple images\n\nThis slide uses the \"Caption plus stuff\" template\n\n::: {.cell execution_count=4}\n\n::: {.cell-output .cell-output-display}\n![](using-quarto-ppt_files/figure-pptx/cell-5-output-1.png){}\n:::\n:::\n\n\n## Mermaid Diagram 1\n\n```{mermaid}\ngraph LR\n    A[.ipynb] --> B((\"Pandoc\"))\n    B ----> E[.doc]\n    B ----> H[.pptx]\n    B --> C[.md]\n    B --> D[.tex] \n    D --> F((Xetex))\n    C --> I((Hugo))\n    F --> G[.pdf]\n    I --> J[.html]\n    style B fill:#FF6655AA\n    style F fill:#88ffFF\n    style I fill:#88ffFF\n```\n\n\n## Mermaid Diagram 2\n\n```{mermaid}\ngraph LR\nQ[.qmd] --> A\nsubgraph Quarto\n    A[.ipynb] --> B((\"Pandoc\"))\n    B --> C[.md]\n    B --> D[.tex] \n    D --> F((Xetex))\n    C --> I((Hugo))\n    style B fill:#FF6655AA\n    style F fill:#88ffFF\n    style I fill:#88ffFF\nend\n    B ----> E[.doc]\n    B ----> H[.pptx]\n    F --> G[.pdf]\n    I --> J[.html]\n\n```\n\n\n### Mermaid Diagram 3\n\n\n```{mermaid}\ngraph LR\n    P[Pre-scripts] --> Q\n    style P fill:#AA99FF\n    Q[.qmd] --> A\n    subgraph Quarto\n        A[.ipynb] --> B((\"Pandoc\"))\n        B --> C[.md]\n        B --> D[.tex] \n        D --> F((Xetex))\n        C --> I((Hugo))\n        style B fill:#FF6655AA\n        style F fill:#88ffFF\n        style I fill:#88ffFF\n    end\n        B ----> E[.doc]\n        B ----> H[.pptx]\n        F --> G[.pdf]\n        I --> J[.html]\n    E --> X[Post-scripts]\n    H --> X\n    G --> X\n    J --> X\n    style X fill:#AA99FF\n```\n\n",
    "supporting": [
      "using-quarto-ppt_files"
    ],
    "filters": []
  }
}