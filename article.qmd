---
title: "Using Quarto for reproducible article writing"
format:
    pdf:
        documentclass: scrartcl
    docx:
        number-sections: true

author: Lucas A. Meyer
date: 2022-07-07
---

```{python}
#| echo: false
from IPython.display import display, Markdown
from itertools import chain
import pandas as pd
```

# Introduction

The purpose of this article is to show how to use Quarto to generate an article just like this, hopefully with better content. 
This is just a demonstration of how powerful Quarto is to generate multiple artifacts from substantially the same content/code.

You can see how I have done this in <https://www.meyerperin.com/using-quarto>.

# Population changes

Over the last few decades, the number of children per woman has been declining and overall longevity has been increasing.

The outcome of these changes is that over the next few decades, the proportion of children and working adults will go down in many countries,
and the proportion of older adults will increase.

Demographers use a metric called **Dependency Ratio** to evaluate how many non-working people are supported by 100 working people.

The formula for the dependency ratio is:

$$
\text{Dependency Ratio} = 100 \times \frac{\text{Non-working population}}{\text{Working population}}
$$

In the figures below, I further decompose the dependency ratio into Young (0-20 years-old), Old (65-79 years-old) and Very Old (80+ years-old). 
Note that these are terms used by demographers. I don't mean any personal judgment when using this classification. One of my favorite writers,
Jared Diamond, who wrote _Guns, Germs and Steel_ [@diamond84] and _Collapse_ [@diamond13], is currently 84-years old and I hope to have his 
disposition at that age.

# Code

{{< include _graph_functions.qmd >}}

```{python}
#| echo: false
#| output: asis

df_dr = pd.read_csv("data/dr.csv.gz", compression="gzip")
df_pop = pd.read_csv("data/pop_brackets.csv.gz", compression="gzip")

years = [2000, 2025, 2050, 2075, 2100]
regions = ["Belgium", "China", "Brazil", "India", "Japan", "Nigeria"]

for name in regions:
    display(Markdown(f"## Age and Population Pyramids for {name}"))
    display(Markdown(f'<div class="columns">'))
    display(Markdown(f'<div class="column">'))
    plot_dependency_ratio(df_dr[df_dr.Location == name])
    display(Markdown(f'</div>'))
    display(Markdown(f'<div class="column">'))
    plot_population_pyramid_series(df_pop[df_pop["Location"]==name], years)
    display(Markdown(f'</div>'))
    display(Markdown(f'</div>'))

```

# References

